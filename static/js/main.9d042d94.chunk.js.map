{"version":3,"sources":["Reducers/Constants.ts","Reducers/FindingFalconStore.ts","Reducers/index.ts","RootStore.ts","Components/PlanetDropdown/index.tsx","Components/VehicleRadioComponent/index.tsx","Services/Constants.ts","Services/Api.ts","Services/index.ts","Components/Home/actions.ts","Components/Home/index.tsx","Components/Result/index.tsx","serviceWorker.ts","index.tsx"],"names":["SET_PLANET_METADATA","SET_VEHICLE_METADATA","SET_AUTHENTICATION_TOKEN","SHOW_FALCON_FIND_LOADER","SET_TOTAL_TIME_TAKEN","SET_FIND_FALCON_RESULT","initialState","fromJS","planets_metadata","vehicles_metadata","authentication_token","falcon_finding_loader","total_time_taken","falcon_finding_response","falconSearchReducer","state","action","type","payload","CONSTANTS","set","setPlanetsMetadata","setVehiclesMetadata","token","setAuthenticationToken","showLoader","setTimeTaken","setFindFalconResult","combineReducers","middleware","applyMiddleware","thunk","Option","Select","PlanetDropdown","props","showSearch","loading","planets","length","style","width","placeholder","optionFilterProp","onChange","onOptionChange","onSearch","OnSearchChange","disabled","filterOption","input","option","children","toLowerCase","indexOf","map","planet","index","key","value","name","radioStyle","display","height","lineHeight","VehicleRadioComp","Group","vehicles","vehicle","total_no","SERVER_URL","FETCH_PLANETS_DATA","FETCH_VEHICLES_DATA","FETCH_AUTHENTICATION_TOKEN","FIND_FALCON","post_bodyGenerator","params","method","headers","Accept","body","getPlanetsData","fetch","then","res","json","getVehiclesData","getAuthenticationTokenData","JSON","stringify","getAuthenticationToken","findFalconServiceCall","findFalconResult","data","setPlanetsData","dispatch","a","setVehiclesData","findFalconCall","param","total_time","Home","onPlanetSelect","event","setState","prevState","selected_planets","Object","assign","disabled_planets","vehicles_options_visibility","filterPlanetsArray","onVehicleSelect","selected_vehicles","target","disabled_vehicles","planetMetaData","find","pl","flag","forEach","vh","max_distance","distance","message","destroy","error","filterVehiclesArray","calculateTimeTaken","planetNumber","filter","vehicleNumber","i","vehicleMetaData","time","speed","planetAndVehicleSelectionList","Array","apply","e","span","resetData","window","location","reload","1","2","3","4","this","className","marginLeft","float","marginRight","onClick","justify","vehicleArray","keys","planetsArray","planet_names","vehicle_names","history","push","React","withRouter","connect","toJS","bindActionCreators","actions","Result","status","planet_name","Boolean","hostname","match","ReactDOM","render","store","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","configureStore","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d042d94.chunk.js","sourcesContent":["export const SET_PLANET_METADATA = 'SET_PLANET_METADATA'\nexport const SET_VEHICLE_METADATA = 'SET_VEHICLE_METADATA'\nexport const SET_AUTHENTICATION_TOKEN = 'SET_AUTHENTICATION_TOKEN'\nexport const SHOW_FALCON_FIND_LOADER = 'SHOW_FALCON_FIND_LOADER'\nexport const SET_TOTAL_TIME_TAKEN = 'SET_TOTAL_TIME_TAKEN'\nexport const SET_FIND_FALCON_RESULT = 'SET_FIND_FALCON_RESULT'\n","import { fromJS } from 'immutable'\nimport * as CONSTANTS from './Constants'\n\n// Initializing Immutable state Store\nconst initialState = fromJS({\n  planets_metadata: [],\n  vehicles_metadata: [],\n  authentication_token: null,\n  falcon_finding_loader: false,\n  total_time_taken: null,\n  falcon_finding_response: {},\n})\n\n/**\n * function to set planets metadata into reducer\n *\n * @param  {Object} state - state Object\n * @param  {Object} payload - payload Object\n */\nfunction setPlanetsMetadata(\n  state: { set: (arg0: string, arg1: any) => void },\n  payload: any\n) {\n  return state.set('planets_metadata', payload)\n}\n\n/**\n * function to set vehicles metadata into reducer\n *\n * @param  {Object} state - state Object\n * @param  {Object} payload - payload Object\n */\nfunction setVehiclesMetadata(\n  state: { set: (arg0: string, arg1: any) => void },\n  payload: any\n) {\n  return state.set('vehicles_metadata', payload)\n}\n\n/**\n * function to set authentication token into reducer\n *\n * @param  {Object} state - state Object\n * @param  {Object} payload - payload Object\n */\nfunction setAuthenticationToken(\n  state: { set: (arg0: string, arg1: any) => void },\n  payload: any\n) {\n  return state.set('authentication_token', payload.token)\n}\n\n/**\n * function to set find falcon result into reducer\n *\n * @param  {Object} state - state Object\n * @param  {Object} payload - payload Object\n */\nfunction setFindFalconResult(\n  state: { set: (arg0: string, arg1: any) => void },\n  payload: any\n) {\n  return state.set('falcon_finding_response', payload)\n}\n\n/**\n * function to show/hide finding falcon loader\n *\n * @param  {Object} state - state Object\n * @param  {Object} payload - payload Object\n */\nfunction showLoader(\n  state: { set: (arg0: string, arg1: any) => void },\n  payload: any\n) {\n  return state.set('falcon_finding_loader', payload)\n}\n\n/**\n * function to set total time taken\n *\n * @param  {Object} state - state Object\n * @param  {Object} payload - payload Object\n */\nfunction setTimeTaken(\n  state: { set: (arg0: string, arg1: any) => void },\n  payload: any\n) {\n  return state.set('total_time_taken', payload)\n}\n\n/**\n * This function mutates the supplied state based on\n * the type of the action.\n *\n * @param {Object} [state=initialState] The immutable state.\n * @param {Object} action The action object.\n * @param {String} action.type the string describing the action.\n * @param {object} action.payload The body of the action.\n * @returns {Object} The mutated state.\n */\nfunction falconSearchReducer(\n  state = initialState,\n  action: { type: string; payload: any }\n) {\n  const { type, payload } = action\n  switch (type) {\n    case CONSTANTS.SET_PLANET_METADATA:\n      return setPlanetsMetadata(state, payload)\n    case CONSTANTS.SET_VEHICLE_METADATA:\n      return setVehiclesMetadata(state, payload)\n    case CONSTANTS.SET_AUTHENTICATION_TOKEN:\n      return setAuthenticationToken(state, payload)\n    case CONSTANTS.SHOW_FALCON_FIND_LOADER:\n      return showLoader(state, payload)\n    case CONSTANTS.SET_TOTAL_TIME_TAKEN:\n      return setTimeTaken(state, payload)\n    case CONSTANTS.SET_FIND_FALCON_RESULT:\n      return setFindFalconResult(state, payload)\n    default:\n      return state\n  }\n}\n\nexport default falconSearchReducer\n","import { combineReducers } from 'redux'\nimport falconSearchReducer from './FindingFalconStore'\n\nexport default combineReducers({\n  falconSearchReducer,\n})\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducer from './Reducers/index'\n\nconst middleware = applyMiddleware(thunk)\n\n/**\n * configuring store to use redux devtools extension\n */\nexport default function configureStore() {\n  const composeEnhancers =\n    typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n      : compose\n\n  const enhancer = composeEnhancers(middleware)\n  return createStore(reducer, {}, enhancer)\n}\n","import * as React from 'react'\nimport { Select } from 'antd'\n\ninterface PlanetProps {\n  planets: Array<{ name: string; distance: number }>\n  disabled: boolean\n  value?: string\n  onOptionChange?: any\n  OnSearchChange?: any\n  loading: boolean\n}\n\nconst { Option } = Select\n\nconst planetOptions = (planets: Array<{ name: string; distance: number }>) => {\n  return planets.map(\n    (planet: { name: string; distance: number }, index: number) => {\n      return (\n        <Option key={index} value={planet.name}>\n          {planet.name}\n        </Option>\n      )\n    }\n  )\n}\n\nexport const PlanetDropdown: React.SFC<PlanetProps> = props => {\n  return (\n    <Select\n      showSearch\n      loading={props.loading && !props.planets.length ? true : false}\n      style={{ width: 200 }}\n      placeholder=\"Select a planet\"\n      optionFilterProp=\"children\"\n      onChange={props.onOptionChange}\n      onSearch={props.OnSearchChange}\n      disabled={props.disabled}\n      filterOption={(input: any, option: any) =>\n        option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n    >\n      {planetOptions(props.planets)}\n    </Select>\n  )\n}\n","import * as React from 'react'\nimport { Radio } from 'antd'\n\nconst radioStyle = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px',\n}\n\ninterface PlanetProps {\n  vehicles: Array<{\n    name: string\n    total_no: number\n    max_distance: number\n    speed: number\n  }>\n  disabled: boolean\n  value: string\n  onOptionChange?: any\n}\n\nconst vehicleOptions = (\n  vehicles: Array<{\n    name: string\n    total_no: number\n    max_distance: number\n    speed: number\n  }>\n) => {\n  return vehicles.map((vehicle, index) => {\n    return (\n      <Radio\n        key={index}\n        style={radioStyle}\n        value={vehicle.name}\n        disabled={vehicle.total_no ? false : true}\n      >\n        {`${vehicle.name}(${vehicle.total_no})`}\n      </Radio>\n    )\n  })\n}\n\nexport const VehicleRadioComp: React.SFC<PlanetProps> = props => {\n  return (\n    <Radio.Group\n      value={props.value}\n      onChange={props.onOptionChange}\n      disabled={props.disabled}\n    >\n      {vehicleOptions(props.vehicles)}\n    </Radio.Group>\n  )\n}\n","export const SERVER_URL = 'https://findfalcone.herokuapp.com'\nexport const FETCH_PLANETS_DATA = '/planets'\nexport const FETCH_VEHICLES_DATA = '/vehicles'\nexport const FETCH_AUTHENTICATION_TOKEN = '/token'\nexport const FIND_FALCON = '/find'\n","import {\n  SERVER_URL,\n  FETCH_PLANETS_DATA,\n  FETCH_VEHICLES_DATA,\n  FETCH_AUTHENTICATION_TOKEN,\n  FIND_FALCON,\n} from './Constants'\n\n/**\n * function to generate the body for post request\n *\n * @param  {String} params - body params\n */\nfunction post_bodyGenerator(params: string) {\n  return {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: params,\n  }\n}\n\n/**\n * function to generate the body for post request\n *\n */\nfunction get_bodyGenerator() {\n  return {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }\n}\n\n/**\n * function to fetch Planets data from the server\n *\n * @return {Promise} Promise\n */\nexport function getPlanets() {\n  return fetch(`${SERVER_URL}${FETCH_PLANETS_DATA}`, get_bodyGenerator())\n}\n\n/**\n * function to fetch vehicles data from the servers\n *\n * @return {Promise} Promise\n */\nexport function getVehicles() {\n  return fetch(`${SERVER_URL}${FETCH_VEHICLES_DATA}`, get_bodyGenerator())\n}\n\n/**\n * function to fetch authentication token from servers\n *\n * @return {Promise} Promise\n */\nexport function getAuthenticationToken() {\n  let params = JSON.stringify({})\n  return fetch(\n    `${SERVER_URL}${FETCH_AUTHENTICATION_TOKEN}`,\n    post_bodyGenerator(params)\n  )\n}\n\n/**\n * function to fetch find results\n *\n * @param {Object} body params\n * @return {Promise} Promise\n */\nexport function findFalconResult(params: object) {\n  let body = JSON.stringify(params)\n  return fetch(`${SERVER_URL}${FIND_FALCON}`, post_bodyGenerator(body))\n}\n","import {\n  getPlanets,\n  getVehicles,\n  getAuthenticationToken,\n  findFalconResult,\n} from './Api'\n\n/**\n * function to get planets\n *\n */\nexport function getPlanetsData() {\n  return getPlanets()\n    .then(res => res.json())\n    .then(res => res)\n}\n\n/**\n * function to get vehicles\n *\n */\nexport function getVehiclesData() {\n  return getVehicles()\n    .then(res => res.json())\n    .then(res => res)\n}\n\n/**\n * function to get Authentication token\n *\n */\nexport function getAuthenticationTokenData() {\n  return getAuthenticationToken()\n    .then(res => res.json())\n    .then(res => res)\n}\n\n/**\n * function to get the find falcon results\n *\n * @param  {Object} params body params\n */\nexport function findFalconServiceCall(params: object) {\n  return findFalconResult(params)\n    .then(res => res.json())\n    .then(data => data)\n}\n","import * as CONSTANTS from '../../Reducers/Constants'\nimport {\n  getPlanetsData,\n  getVehiclesData,\n  getAuthenticationTokenData,\n  findFalconServiceCall,\n} from '../../Services/index'\n\n/**\n * function to set planets data in reducer store\n *\n */\nexport const setPlanetsData = () => async (\n  dispatch: (arg0: { type: string; payload: any }) => void\n) => {\n  dispatch({\n    type: CONSTANTS.SHOW_FALCON_FIND_LOADER,\n    payload: true,\n  })\n  const payload = await getPlanetsData()\n  dispatch({\n    type: CONSTANTS.SET_PLANET_METADATA,\n    payload: payload,\n  })\n  dispatch({\n    type: CONSTANTS.SHOW_FALCON_FIND_LOADER,\n    payload: false,\n  })\n}\n\n/**\n * function to set vehicles data in reducer store\n *\n */\nexport const setVehiclesData = () => async (\n  dispatch: (arg0: { type: string; payload: any }) => void\n) => {\n  const payload = await getVehiclesData()\n  dispatch({\n    type: CONSTANTS.SET_VEHICLE_METADATA,\n    payload: payload,\n  })\n}\n\n/**\n * function to get Authentication Token\n *\n */\nexport const setAuthenticationToken = () => async (\n  dispatch: (arg0: { type: string; payload: any }) => void\n) => {\n  const payload = await getAuthenticationTokenData()\n  dispatch({\n    type: CONSTANTS.SET_AUTHENTICATION_TOKEN,\n    payload: payload,\n  })\n}\n\n/**\n * Function to get falcon result\n *\n */\nexport const findFalconCall = (param: any) => async (\n  dispatch: (arg0: { type: string; payload: any }) => void\n) => {\n  dispatch({\n    type: CONSTANTS.SET_TOTAL_TIME_TAKEN,\n    payload: param.total_time,\n  })\n  dispatch({\n    type: CONSTANTS.SHOW_FALCON_FIND_LOADER,\n    payload: true,\n  })\n  const payload = await findFalconServiceCall(param)\n  dispatch({\n    type: CONSTANTS.SET_FIND_FALCON_RESULT,\n    payload: payload,\n  })\n  dispatch({\n    type: CONSTANTS.SHOW_FALCON_FIND_LOADER,\n    payload: false,\n  })\n}\n","import * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { Row, Col, Button, Icon, message } from 'antd'\nimport { PlanetDropdown } from '../PlanetDropdown'\nimport { VehicleRadioComp } from '../VehicleRadioComponent'\nimport * as actions from './actions'\nimport './index.scss'\n\nclass Home extends React.Component<any, any> {\n  static propTypes: {\n    planets_metadata: PropTypes.Requireable<Array<any>>\n    vehicles_metadata: PropTypes.Requireable<Array<any>>\n    authentication_token: PropTypes.Requireable<string>\n    falcon_finding_loader: PropTypes.Requireable<boolean>\n  }\n  total_time: number\n\n  constructor(props: any) {\n    super(props)\n    this.total_time = 0\n    this.state = {\n      selected_planets: {},\n      disabled_planets: {},\n      selected_vehicles: {},\n      disabled_vehicles: {\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n      },\n      vehicles_options_visibility: {\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n      },\n      vehicles: [],\n      planets: [],\n    }\n  }\n\n  async componentDidMount() {\n    await this.props.setPlanetsData()\n    await this.props.setVehiclesData()\n    await this.props.setAuthenticationToken()\n    this.setState({\n      planets: this.props.planets_metadata,\n      vehicles: this.props.vehicles_metadata,\n    })\n  }\n\n  onPlanetSelect = (event: any, planet: any) => {\n    this.setState(\n      (prevState: {\n        selected_planets: any\n        disabled_planets: any\n        vehicles_options_visibility: any\n      }) => {\n        return {\n          selected_planets: Object.assign(prevState.selected_planets, {\n            [planet]: event,\n          }),\n          disabled_planets: Object.assign(prevState.disabled_planets, {\n            [planet]: true,\n          }),\n          vehicles_options_visibility: Object.assign(\n            prevState.vehicles_options_visibility,\n            {\n              [planet]: true,\n            }\n          ),\n        }\n      },\n      () => {\n        this.filterPlanetsArray(planet)\n      }\n    )\n  }\n\n  onVehicleSelect = (event: any, vehicle: any) => {\n    this.setState(\n      (prevState: { selected_vehicles: any; disabled_vehicles: any }) => {\n        return {\n          selected_vehicles: Object.assign(prevState.selected_vehicles, {\n            [vehicle]: event.target.value,\n          }),\n          disabled_vehicles: Object.assign(prevState.disabled_vehicles, {\n            [vehicle]: true,\n          }),\n        }\n      },\n      () => {\n        const planet = this.state.selected_planets[vehicle]\n        const planetMetaData = this.props.planets_metadata.find(\n          (pl: { name: any }) => {\n            return pl.name === planet\n          }\n        )\n        let flag = true\n        this.state.vehicles.forEach(\n          (vh: { max_distance: number; total_no: number }) => {\n            if (vh.max_distance >= planetMetaData.distance && vh.total_no) {\n              flag = false\n            }\n          }\n        )\n        if (flag) {\n          message.destroy()\n          message.error(\n            `Selected Planet Can't be reached by any available vehicles. Please Select another Planet.`\n          )\n          this.setState(\n            (prevState: {\n              disabled_planets: any\n              disabled_vehicles: any\n              selected_vehicles: any\n            }) => {\n              return {\n                disabled_planets: Object.assign(prevState.disabled_planets, {\n                  [vehicle]: false,\n                }),\n                disabled_vehicles: Object.assign(prevState.disabled_vehicles, {\n                  [vehicle]: false,\n                }),\n                selected_vehicles: Object.assign(prevState.selected_vehicles, {\n                  [vehicle]: null,\n                }),\n              }\n            }\n          )\n        } else {\n          this.filterVehiclesArray(vehicle)\n          this.calculateTimeTaken(vehicle)\n        }\n      }\n    )\n  }\n\n  filterPlanetsArray = (planetNumber: number) => {\n    const planets = this.state.planets.filter(\n      (planet: { name: React.ReactText }) => {\n        if (!(this.state.selected_planets[planetNumber] === planet.name)) {\n          return planet\n        } else {\n          return null\n        }\n      }\n    )\n    this.setState({\n      planets,\n    })\n  }\n\n  filterVehiclesArray = (vehicleNumber: number) => {\n    const vehicles = this.state.vehicles.filter(\n      (vh: { name: React.ReactText; total_no: number }) => {\n        if (vh.name === this.state.selected_vehicles[vehicleNumber]) {\n          return Object.assign({ ...vh }, { total_no: --vh.total_no })\n        } else {\n          return vh\n        }\n      }\n    )\n    this.setState({\n      vehicles,\n    })\n  }\n\n  calculateTimeTaken = (i: string | number) => {\n    const vehicle = this.state.selected_vehicles[i]\n    const vehicleMetaData = this.props.vehicles_metadata.find(\n      (vh: { name: any }) => {\n        return vh.name === vehicle\n      }\n    )\n    const planet = this.state.selected_planets[i]\n    const planetMetaData = this.props.planets_metadata.find(\n      (pl: { name: any }) => {\n        return pl.name === planet\n      }\n    )\n\n    if (planetMetaData.distance > vehicleMetaData.max_distance) {\n      message.error(\"Sorry! This vehicle can't reach the planet you selected\")\n      this.setState(\n        (prevState: { selected_vehicles: any; disabled_vehicles: any }) => {\n          return {\n            disabled_vehicles: Object.assign(prevState.disabled_vehicles, {\n              [i]: false,\n            }),\n          }\n        },\n        () => {\n          const vehicles = this.state.vehicles.filter(\n            (vh: { name: React.ReactText; total_no: number }) => {\n              if (vh.name === this.state.selected_vehicles[i]) {\n                return Object.assign({ ...vh }, { total_no: ++vh.total_no })\n              } else {\n                return vh\n              }\n            }\n          )\n          this.setState({\n            vehicles,\n          })\n        }\n      )\n    } else {\n      const time = planetMetaData.distance / vehicleMetaData.speed\n      this.total_time += time\n    }\n  }\n\n  planetAndVehicleSelectionList = () => {\n    return Array.apply(null, Array(4)).map((e, i) => {\n      return (\n        <Col span={4} key={i}>\n          <div>\n            <p>{`Destination ${++i}`}</p>\n            <PlanetDropdown\n              planets={this.state.planets}\n              loading={this.props.falcon_finding_loader}\n              onOptionChange={(event: any) => {\n                this.onPlanetSelect(event, i)\n              }}\n              disabled={this.state.disabled_planets[i]}\n            />\n            {this.state.vehicles_options_visibility[i] ? (\n              <VehicleRadioComp\n                value={this.state.selected_vehicles[i] || null}\n                vehicles={this.state.vehicles}\n                onOptionChange={(event: any) => {\n                  this.onVehicleSelect(event, i)\n                }}\n                disabled={this.state.disabled_vehicles[i]}\n              />\n            ) : null}\n          </div>\n        </Col>\n      )\n    })\n  }\n\n  resetData = () => {\n    window.location.reload()\n  }\n\n  render() {\n    return (\n      <div className=\"HomeContainer\">\n        <h1 className=\"HomeContainer_heading\">\n          <span style={{ marginLeft: '8.5%' }}>Finding Falcone!</span>\n          <span style={{ float: 'right', marginRight: '32px' }}>\n            <Button onClick={this.resetData}>\n              <Icon type=\"reload\" />\n              &nbsp;Reset\n            </Button>\n          </span>\n        </h1>\n        <h4 className=\"HomeContainer_subHeading\">\n          Select planets you want to search in:\n        </h4>\n        <Row type=\"flex\" justify=\"space-around\">\n          {this.planetAndVehicleSelectionList()}\n        </Row>\n        <div>\n          <p className=\"TimeCalculator\">Time Taken: {this.total_time}</p>\n        </div>\n        <div className=\"Button_find\">\n          <Button\n            onClick={async () => {\n              const vehicleArray = Object.keys(\n                this.state.selected_vehicles\n              ).map(i => this.state.selected_vehicles[i])\n              const planetsArray = Object.keys(this.state.selected_planets).map(\n                i => this.state.selected_planets[i]\n              )\n              await this.props.findFalconCall({\n                token: this.props.authentication_token,\n                planet_names: planetsArray,\n                vehicle_names: vehicleArray,\n                total_time: this.total_time,\n              })\n              this.props.history.push('/result')\n            }}\n          >\n            {this.props.falcon_finding_loader ? <Icon type=\"loading\" /> : null}\n            Find Falcon!\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nHome.propTypes = {\n  planets_metadata: PropTypes.array,\n  vehicles_metadata: PropTypes.array,\n  authentication_token: PropTypes.string,\n  falcon_finding_loader: PropTypes.bool,\n}\n\nconst mapStateToProps = (state: any) => {\n  state = state.falconSearchReducer.toJS()\n  return {\n    planets_metadata: state.planets_metadata,\n    vehicles_metadata: state.vehicles_metadata,\n    authentication_token: state.authentication_token,\n    falcon_finding_loader: state.falcon_finding_loader,\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      ...actions,\n    },\n    dispatch\n  )\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home))\n","import * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { Button } from 'antd'\nimport './index.scss'\n\nclass Result extends React.PureComponent<any, any> {\n  static propTypes: {\n    falcon_finding_response: PropTypes.Requireable<object>\n    total_time_taken: PropTypes.Requireable<number>\n  }\n\n  componentDidMount() {\n    if (!Object.keys(this.props.falcon_finding_response).length) {\n      this.props.history.push('/')\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"ResultContainer\">\n        <h1 className=\"ResultContainer_heading\">Finding Falcone!</h1>\n        <h4 className=\"ResultContainer_subHeading\">\n          {!this.props.falcon_finding_response.error\n            ? this.props.falcon_finding_response.status === 'success'\n              ? `Success! Congratulation on finding Falcone. King shan is mighty pleased.`\n              : `Sorry! You didn't able to save King Shan.`\n            : `Error: ${this.props.falcon_finding_response.error}`}\n        </h4>\n        {!this.props.falcon_finding_response.error ? (\n          <div>\n            <p className=\"FoundTime\">\n              Time Taken: {`${this.props.total_time_taken}`}\n            </p>\n            <p className=\"FoundPlanetText\">\n              Planet Found:{' '}\n              {this.props.falcon_finding_response.status === 'success'\n                ? this.props.falcon_finding_response.planet_name\n                : `Not found!`}\n            </p>\n          </div>\n        ) : null}\n        <div className=\"Button_restart\">\n          <Button\n            onClick={() => {\n              this.props.history.push('/')\n            }}\n          >\n            Start Again\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nResult.propTypes = {\n  falcon_finding_response: PropTypes.object,\n  total_time_taken: PropTypes.number,\n}\n\nconst mapStateToProps = (state: any) => {\n  state = state.falconSearchReducer.toJS()\n  return {\n    falcon_finding_response: state.falcon_finding_response,\n    total_time_taken: state.total_time_taken,\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, null)(Result))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport configureStore from './RootStore'\nimport Home from './Components/Home/index'\nimport Result from './Components/Result/index'\nimport * as serviceWorker from './serviceWorker'\nimport './index.scss'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/result\" component={Result} />\n        </Switch>\n      </div>\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}